
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
	
	#设定负载均衡的服务器列表
	#upstream load_balance_server {
		#weigth参数表示权值，权值越高被分配到的几率越大
		#server 192.168.1.11:80  weight=5;
		#server 192.168.1.12:80  weight=1;
		#server 192.168.1.13:80  weight=6;
	 #}
	 
	 upstream load_balance_server {
		server 127.0.0.1:8003;
		server 127.0.0.1:9003;
	 }

    server {
        listen       100;
		
		#定义使用www.xx.com访问
        #server_name www.helloworld.com;
		
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
			#请求转向load_balance_server 定义的服务器列表
			proxy_pass http://load_balance_server ;
			
			#以下是一些反向代理的配置(可选择性配置)
		    proxy_redirect off;
		    proxy_set_header Host $host;
		    proxy_set_header X-Real-IP $remote_addr;
		    #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
		    proxy_set_header X-Forwarded-For $remote_addr;
			#nginx跟后端服务器连接超时时间(代理连接超时)
		    #proxy_connect_timeout 90; 
			#后端服务器数据回传时间(代理发送超时)			
		    #proxy_send_timeout 90;
			#连接成功后，后端服务器响应时间(代理接收超时)
		    #proxy_read_timeout 90; 
			#设置代理服务器（nginx）保存用户头信息的缓冲区大小			
		    #proxy_buffer_size 4k;
			#proxy_buffers缓冲区，网页平均在32k以下的话，这样设置			
		    #proxy_buffers 4 32k; 
			#高负荷下缓冲大小（proxy_buffers*2）			
		    #proxy_busy_buffers_size 64k; 
			#设定缓存文件夹大小，大于这个值，将从upstream服务器传			
		    #proxy_temp_file_write_size 64k;  
		    #允许客户端请求的最大单文件字节数
		    #client_max_body_size 10m; 
			#缓冲区代理缓冲用户端请求的最大字节数			
		    #client_body_buffer_size 128k;   
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
